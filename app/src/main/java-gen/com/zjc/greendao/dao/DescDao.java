package com.zjc.greendao.dao;

import android.database.Cursor;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;

import com.zjc.greendao.entity.Desc;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DESC".
*/
public class DescDao extends AbstractDao<Desc, Void> {

    public static final String TABLENAME = "DESC";

    /**
     * Properties of entity Desc.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Assetnum = new Property(0, String.class, "assetnum", false, "ASSETNUM");
        public final static Property Regular = new Property(1, String.class, "regular", false, "REGULAR");
        public final static Property Executeby = new Property(2, String.class, "executeby", false, "EXECUTEBY");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
    };


    public DescDao(DaoConfig config) {
        super(config);
    }
    
    public DescDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DESC\" (" + //
                "\"ASSETNUM\" TEXT," + // 0: assetnum
                "\"REGULAR\" TEXT," + // 1: regular
                "\"EXECUTEBY\" TEXT," + // 2: executeby
                "\"TYPE\" TEXT);"); // 3: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DESC\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, Desc entity) {
        stmt.clearBindings();
 
        String assetnum = entity.getAssetnum();
        if (assetnum != null) {
            stmt.bindString(1, assetnum);
        }
 
        String regular = entity.getRegular();
        if (regular != null) {
            stmt.bindString(2, regular);
        }
 
        String executeby = entity.getExecuteby();
        if (executeby != null) {
            stmt.bindString(3, executeby);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Desc readEntity(Cursor cursor, int offset) {
        Desc entity = new Desc( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // assetnum
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // regular
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // executeby
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Desc entity, int offset) {
        entity.setAssetnum(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRegular(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExecuteby(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Desc entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Desc entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
