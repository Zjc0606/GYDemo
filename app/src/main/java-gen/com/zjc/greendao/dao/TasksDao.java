package com.zjc.greendao.dao;

import android.database.Cursor;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;

import com.zjc.greendao.entity.Tasks;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASKS".
*/
public class TasksDao extends AbstractDao<Tasks, Void> {

    public static final String TABLENAME = "TASKS";

    /**
     * Properties of entity Tasks.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Phynum = new Property(0, String.class, "phynum", false, "PHYNUM");
        public final static Property Rfid = new Property(1, String.class, "rfid", false, "RFID");
        public final static Property Assetnum = new Property(2, String.class, "assetnum", false, "ASSETNUM");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
    };


    public TasksDao(DaoConfig config) {
        super(config);
    }
    
    public TasksDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASKS\" (" + //
                "\"PHYNUM\" TEXT," + // 0: phynum
                "\"RFID\" TEXT," + // 1: rfid
                "\"ASSETNUM\" TEXT," + // 2: assetnum
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"TYPE\" TEXT);"); // 4: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASKS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, Tasks entity) {
        stmt.clearBindings();
 
        String phynum = entity.getPhynum();
        if (phynum != null) {
            stmt.bindString(1, phynum);
        }
 
        String rfid = entity.getRfid();
        if (rfid != null) {
            stmt.bindString(2, rfid);
        }
 
        String assetnum = entity.getAssetnum();
        if (assetnum != null) {
            stmt.bindString(3, assetnum);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Tasks readEntity(Cursor cursor, int offset) {
        Tasks entity = new Tasks( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // phynum
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // rfid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // assetnum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Tasks entity, int offset) {
        entity.setPhynum(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRfid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAssetnum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Tasks entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Tasks entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
