package com.zjc.greendao.dao;

import android.database.Cursor;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;

import com.zjc.greendao.entity.Plan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLANGY".
*/
public class PlanDao extends AbstractDao<Plan, Void> {

    public static final String TABLENAME = "PLANGY";

    /**
     * Properties of entity Plan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Cplannum = new Property(0, String.class, "cplannum", false, "CPLANNUM");
        public final static Property Assetnum = new Property(1, String.class, "assetnum", false, "ASSETNUM");
        public final static Property Cstdnum = new Property(2, String.class, "cstdnum", false, "CSTDNUM");
        public final static Property Executeby = new Property(3, String.class, "executeby", false, "EXECUTEBY");
        public final static Property Drawupdate = new Property(4, String.class, "drawupdate", false, "DRAWUPDATE");
        public final static Property Regular = new Property(5, String.class, "regular", false, "REGULAR");
        public final static Property Result = new Property(6, String.class, "result", false, "RESULT");
    };


    public PlanDao(DaoConfig config) {
        super(config);
    }
    
    public PlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLANGY\" (" + //
                "\"CPLANNUM\" TEXT," + // 0: cplannum
                "\"ASSETNUM\" TEXT," + // 1: assetnum
                "\"CSTDNUM\" TEXT," + // 2: cstdnum
                "\"EXECUTEBY\" TEXT," + // 3: executeby
                "\"DRAWUPDATE\" TEXT," + // 4: drawupdate
                "\"REGULAR\" TEXT," + // 5: regular
                "\"RESULT\" TEXT);"); // 6: result
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLANGY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, Plan entity) {
        stmt.clearBindings();
 
        String cplannum = entity.getCplannum();
        if (cplannum != null) {
            stmt.bindString(1, cplannum);
        }
 
        String assetnum = entity.getAssetnum();
        if (assetnum != null) {
            stmt.bindString(2, assetnum);
        }
 
        String cstdnum = entity.getCstdnum();
        if (cstdnum != null) {
            stmt.bindString(3, cstdnum);
        }
 
        String executeby = entity.getExecuteby();
        if (executeby != null) {
            stmt.bindString(4, executeby);
        }
 
        String drawupdate = entity.getDrawupdate();
        if (drawupdate != null) {
            stmt.bindString(5, drawupdate);
        }
 
        String regular = entity.getRegular();
        if (regular != null) {
            stmt.bindString(6, regular);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(7, result);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Plan readEntity(Cursor cursor, int offset) {
        Plan entity = new Plan( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cplannum
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // assetnum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cstdnum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // executeby
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // drawupdate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // regular
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // result
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Plan entity, int offset) {
        entity.setCplannum(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAssetnum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCstdnum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExecuteby(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDrawupdate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRegular(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setResult(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Plan entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Plan entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
