package com.zjc.greendao.dao;

import android.database.Cursor;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.database.Database;
import de.greenrobot.dao.database.DatabaseStatement;

import com.zjc.greendao.entity.History;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORYRECORD".
*/
public class HistoryDao extends AbstractDao<History, Void> {

    public static final String TABLENAME = "HISTORYRECORD";

    /**
     * Properties of entity History.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Date = new Property(0, String.class, "date", false, "DATE");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property Result1 = new Property(2, String.class, "result1", false, "RESULT1");
        public final static Property Result2 = new Property(3, String.class, "result2", false, "RESULT2");
        public final static Property Result3 = new Property(4, String.class, "result3", false, "RESULT3");
        public final static Property Result4 = new Property(5, String.class, "result4", false, "RESULT4");
    };


    public HistoryDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORYRECORD\" (" + //
                "\"DATE\" TEXT," + // 0: date
                "\"CONTENT\" TEXT," + // 1: content
                "\"RESULT1\" TEXT," + // 2: result1
                "\"RESULT2\" TEXT," + // 3: result2
                "\"RESULT3\" TEXT," + // 4: result3
                "\"RESULT4\" TEXT);"); // 5: result4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORYRECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(DatabaseStatement stmt, History entity) {
        stmt.clearBindings();
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(1, date);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String result1 = entity.getResult1();
        if (result1 != null) {
            stmt.bindString(3, result1);
        }
 
        String result2 = entity.getResult2();
        if (result2 != null) {
            stmt.bindString(4, result2);
        }
 
        String result3 = entity.getResult3();
        if (result3 != null) {
            stmt.bindString(5, result3);
        }
 
        String result4 = entity.getResult4();
        if (result4 != null) {
            stmt.bindString(6, result4);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public History readEntity(Cursor cursor, int offset) {
        History entity = new History( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // date
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // result1
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // result2
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // result3
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // result4
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, History entity, int offset) {
        entity.setDate(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setResult1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResult2(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setResult3(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setResult4(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(History entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(History entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
